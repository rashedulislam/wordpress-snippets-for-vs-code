// Alias for creating file and folder

alias epdir="mkdir -p plugin_name/{widgets,controls,css,js/libs}"
alias epfile="touch plugin_name/{widgets/widget_name.php,controls/control_name.php,css/widget_name.css,js/{widget_name1.js,widget_name2.js,libs/some-library.js},plugin_name.php}"
alias ep="epdir && epfile"

"Elementor Plugin structure": {
  "prefix": "ep",
  "body": [
    "<?php",
    "/**",
    " * Plugin Name: ",
    " * Description: Elementor custom plugin for",
    " * Plugin URI:  ",
    " * Version:     1.0.0",
    " * Author:      Md Rashedul Islam",
    " * Author URI:  ",
    " * Text Domain: ",
    " */",
    "",
    "if ( ! defined( 'ABSPATH' ) ) {",
    "	exit;",
    "}",
    "",
    "final class Plugin_Name {",
    "",
    "",
    "	const VERSION = '1.0.0';",
    "",
    "	const MINIMUM_ELEMENTOR_VERSION = '2.0.0';",
    "",
    "	const MINIMUM_PHP_VERSION = '5.6';",
    "",
    "	private static $$_instance = null;",
    "",
    "	public static function instance() {",
    "",
    "		if ( is_null( self::$$_instance ) ) {",
    "			self::$$_instance = new self();",
    "		}",
    "		return self::$$_instance;",
    "",
    "	}",
    "",
    "	public function __construct() {",
    "",
    "		add_action( 'init', [ $$this, 'i18n' ] );",
    "		add_action( 'plugins_loaded', [ $$this, 'init' ] );",
    "",
    "	}",
    "",
    "	public function i18n() {",
    "",
    "		load_plugin_textdomain( 'text-domain' );",
    "",
    "	}",
    "",
    "",
    "	public function init() {",
    "",
    "		// Check if Elementor installed and activated",
    "		if ( ! did_action( 'elementor/loaded' ) ) {",
    "			add_action( 'admin_notices', [ $$this, 'admin_notice_missing_main_plugin' ] );",
    "			return;",
    "		}",
    "",
    "		// Check for required Elementor version",
    "		if ( ! version_compare( ELEMENTOR_VERSION, self::MINIMUM_ELEMENTOR_VERSION, '>=' ) ) {",
    "			add_action( 'admin_notices', [ $$this, 'admin_notice_minimum_elementor_version' ] );",
    "			return;",
    "		}",
    "",
    "		// Check for required PHP version",
    "		if ( version_compare( PHP_VERSION, self::MINIMUM_PHP_VERSION, '<' ) ) {",
    "			add_action( 'admin_notices', [ $$this, 'admin_notice_minimum_php_version' ] );",
    "			return;",
    "    }",
    "    ",
    "    // Include plugin files",
    "		$$this->includes();",
    "",
    "		// Register widgets",
    "		add_action( 'elementor/widgets/widgets_registered', [ $$this, 'register_widgets' ] );",
    "",
    "    // Register Widget Styles",
    "    add_action( 'elementor/frontend/after_enqueue_styles', [ $$this, 'widget_styles' ] );",
    "",
    "    // Register Widget Scripts",
    "    add_action( 'elementor/frontend/after_register_scripts', [ $$this, 'widget_scripts' ] );",
    "",
    "    // Register controls",
    "		add_action( 'elementor/controls/controls_registered', [ $$this, 'register_controls' ] );",
    "	}",
    "",
    "",
    "	public function admin_notice_missing_main_plugin() {",
    "",
    "		if ( isset( $$_GET['activate'] ) ) unset( $$_GET['activate'] );",
    "",
    "		$$message = sprintf(",
    "			/* translators: 1: Plugin name 2: Elementor */",
    "			esc_html__( '\"%1$$s\" requires \"%2$$s\" to be installed and activated.', 'text-domain' ),",
    "			'<strong>' . esc_html__( 'Product Elementor Extension', 'text-domain' ) . '</strong>',",
    "			'<strong>' . esc_html__( 'Product', 'text-domain' ) . '</strong>'",
    "		);",
    "",
    "		printf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$$s</p></div>', $$message );",
    "",
    "	}",
    "",
    "	public function admin_notice_minimum_elementor_version() {",
    "",
    "		if ( isset( $$_GET['activate'] ) ) unset( $$_GET['activate'] );",
    "",
    "		$$message = sprintf(",
    "			/* translators: 1: Plugin name 2: Elementor 3: Required Elementor version */",
    "			esc_html__( '\"%1$$s\" requires \"%2$$s\" version %3$$s or greater.', 'text-domain' ),",
    "			'<strong>' . esc_html__( 'Product Elementor Extension', 'text-domain' ) . '</strong>',",
    "			'<strong>' . esc_html__( 'Product', 'text-domain' ) . '</strong>',",
    "			 self::MINIMUM_ELEMENTOR_VERSION",
    "		);",
    "",
    "		printf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$$s</p></div>', $$message );",
    "",
    "	}",
    "",
    "	public function admin_notice_minimum_php_version() {",
    "",
    "		if ( isset( $$_GET['activate'] ) ) unset( $$_GET['activate'] );",
    "",
    "		$$message = sprintf(",
    "			/* translators: 1: Plugin name 2: PHP 3: Required PHP version */",
    "			esc_html__( '\"%1$$s\" requires \"%2$$s\" version %3$$s or greater.', 'text-domain' ),",
    "			'<strong>' . esc_html__( 'Product Elementor Extension', 'text-domain' ) . '</strong>',",
    "			'<strong>' . esc_html__( 'PHP', 'text-domain' ) . '</strong>',",
    "			 self::MINIMUM_PHP_VERSION",
    "		);",
    "",
    "		printf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$$s</p></div>', $$message );",
    "",
    "	}",
    "",
    "",
    "	public function includes() {",
    "",
    "    require_once( __DIR__ . '/widgets/test-widget-1.php' );",
    "    require_once( __DIR__ . '/controls/test-control-1.php' );",
    "",
    "	}",
    "",
    "	public function register_widgets() {",
    "",
    "		\\Elementor\\Plugin::instance()->widgets_manager->register_widget_type( new \\Elementor_Test_Widget1() );",
    "",
    "  }",
    "  ",
    "  public function register_controls() {",
    "",
    "		$$controls_manager = \\Elementor\\Plugin::$$instance->controls_manager;",
    "		$$controls_manager->register_control( 'control-type-1', new Test_Control1() );",
    "",
    "	}",
    "",
    "",
    "	public function widget_styles() {",
    "",
    "		wp_enqueue_style( 'product_list', plugins_url( 'widgets/css/product_list.css', __FILE__ ) );",
    "",
    "  }",
    "  ",
    "",
    "  public function widget_scripts() {",
    "		wp_register_script( 'some-library', plugins_url( 'js/libs/some-library.js', __FILE__ ) );",
    "		wp_register_script( 'widget-1', plugins_url( 'js/widget-1.js', __FILE__ ) );",
    "		wp_register_script( 'widget-2', plugins_url( 'js/widget-2.js', __FILE__ ), [ 'jquery', 'some-library' ] );",
    "",
    "	}",
    "",
    "}",
    "",
    "Plugin_Name::instance();",
    ""
  ],
  "description": "Elementor Plugin structure"
},
"Elementor widget structure": {
    "prefix": "ew",
    "body": [
      "<?php",
      "",
      "class Elementor_Test_Widget1 extends \\Elementor\\Widget_Base {",
      "",
      "",
      "	public function get_name() {",
      "	return '';",
      "	}",
      "",
      "	public function get_title() {",
      "	return __( '', 'plugin-name' );",
      "	}",
      "",
      "	public function get_icon() {",
      "	return 'eicon-dashboard/eicon-clock/eicon-products/eicon-bag-light';",
      "	}",
      "",
      "	public function get_categories() {",
      "	return [ 'basic' ];",
      "	}",
      "",
      "	protected function _register_controls() {",
      "",
      "	 $$this->end_controls_section();",
      "	$$this->start_controls_section(",
      "	'content_section',",
      "	[",
      "	'label' => __( 'Content', 'plugin-name' ),",
      "	'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,",
      "	]",
      " );",
      " ",
      " // Add controls here",
      "",
      "",
      "	 $$this->end_controls_section();",
      "",
      "  }",
      "  ",
      "	protected function render() {",
      "",
      "    $$settings = $$this->get_settings_for_display();",
      "		?>",
      "    ",
      "    <!-- Input html here -->",
      "",
      "",
      "	<?php",
      "  }",
      "  ",
      "  protected function _content_template() {",
      "  ?>",
			"		",
      "    <!-- Input html here -->",
      "",
      "	<?php",
      "	}",
      "",
      "}",
      ""
    ],
    "description": "Elementor widget structure"
  },
"PHP Settings Display": {
  "prefix": "ps",
  "body": [
    "<?php echo $$settings['field_name'] ; ?>"
  ],
  "description": "PHP Settings Display"
},
"Php inline settings": {
  "prefix": "pis",
  "body": [
    "$$this->add_render_attribute( 'field_name', 'attribute_name', 'attribute_value' );",
    "$$this->add_inline_editing_attributes( 'field_name', 'basic' );"
  ],
  "description": "Php inline settings"
},
"Php inline render": {
  "prefix": "pir",
  "body": [
    "<?php echo $$this->get_render_attribute_string( 'field_name' ); ?>"
  ],
  "description": "Php inline render"
},
  "PHP loop start": {
    "prefix": "pls",
    "body": [
      "<?php ",
      "  if($$settings['list_name']):",
      "   foreach ( $$settings['list_name'] as $$index => $$item ) :",
      "    $$field_name = $$this->get_repeater_setting_key( 'field_name', 'list_name', $$index );",
      "    $$this->add_inline_editing_attributes( $$field_name, 'basic' );",
      "?>"
    ],
    "description": "PHP loop start"
  },
  "PHP loop end": {
    "prefix": "ple",
    "body": [
      "<?php  endforeach; endif; ?>"
    ],
    "description": "PHP loop end"
  },
"JS inline settings": {
  "prefix": "jis",
  "body": [
    "<#",
    "view.addRenderAttribute( 'field_name', 'attribute_name', 'attribute_value'  );",
    "view.addInlineEditingAttributes( 'field_name', 'basic' );",
    "#>"
  ],
  "description": "JS inline settings"
},
